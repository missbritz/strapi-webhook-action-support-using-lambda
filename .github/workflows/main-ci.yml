# This is a basic workflow to help you get started with Actions

name: Main CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build-and-deploy"
  build-and-deploy:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Ensure folder is created
      - name: Create Cache Directory
        run: mkdir -p /tmp/.buildx-cache

      # Cache docker layers for reuse
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Login to AWS
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

       # Login to ECR similar as -> aws ecr get-login-password | docker login --username AWS --password-stdin <ECR URL>
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Build docker image and push to ECR
      - name: Build, tag, and push Docker image to Amazon ECR
        run: |
          docker buildx build --cache-from=type=local,src=/tmp/.buildx-cache \
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --tag ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }} \
            --push .
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Update lambda function with latest image pushed in ECR
      - name: Update Lambda function with latest ECR image
        run: |
          aws lambda update-function-code \
            --function-name ${{ secrets.LAMBDA_FUNCTION_NAME }} \
            --image-uri ${{ secrets.AWS_ECR_REGISTRY }}/${{ secrets.IMAGE_NAME }}:${{ secrets.IMAGE_TAG }}
